beans.ValueComparator -> a.a:
    java.util.Map base -> a
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
beans.VitaminBean -> a.b:
    java.lang.String foodName -> a
    double vitaminA -> b
    double vitaminC -> c
    double vitaminD -> d
    double vitaminE -> e
    double vitaminK -> f
    double vitaminB1 -> g
    double vitaminB2 -> h
    double vitaminB3 -> i
    double vitaminB6 -> j
    double vitaminB12 -> k
    int amount -> l
    java.lang.String type -> m
    void updateAmount(int) -> a
    java.util.Map getVitaminMap() -> a
    java.lang.String getFoodName() -> b
    double getVitaminA() -> c
    double getVitaminC() -> d
    double getVitaminD() -> e
    double getVitaminE() -> f
    double getVitaminK() -> g
    double getVitaminB1() -> h
    double getVitaminB2() -> i
    double getVitaminB3() -> j
    double getVitaminB6() -> k
    double getVitaminB12() -> l
    int getAmount() -> m
com.github.mikephil.charting.charts.BarChart -> com.github.mikephil.charting.charts.a:
    float mBarSpace -> ay
    float mSkew -> az
    float mDepth -> aA
    boolean m3DEnabled -> aB
    boolean mDrawHighlightArrow -> aC
    java.util.ArrayList mTopColors -> aD
    java.util.ArrayList mSideColors -> aE
    android.graphics.RectF mBarRect -> aF
    void init() -> a
    void setColorTemplate(com.github.mikephil.charting.utils.ColorTemplate) -> setColorTemplate
    void calculate3DColors() -> b
    void calcMinMax(boolean) -> a
    void drawHighlights() -> c
    void drawData() -> d
    void drawValues() -> e
    void setSkew(float) -> setSkew
    float getSkew() -> getSkew
    void setDepth(float) -> setDepth
    float getDepth() -> getDepth
    float getBarSpace() -> getBarSpace
    void setBarSpace(float) -> setBarSpace
    void set3DEnabled(boolean) -> set3DEnabled
    void setDrawHighlightArrow(boolean) -> setDrawHighlightArrow
    void drawAdditional() -> f
com.github.mikephil.charting.charts.BarLineChartBase -> com.github.mikephil.charting.charts.b:
    java.lang.String mUnit -> a
    int mMaxVisibleCount -> b
    float mMinScaleY -> ay
    float mMinScaleX -> az
    float mScaleX -> c
    float mScaleY -> d
    float mMaxScaleY -> e
    int mYLabelCount -> f
    float mGridWidth -> g
    boolean mDrawUnitInChart -> h
    boolean mPinchZoomEnabled -> i
    boolean mDragEnabled -> j
    boolean mFixedYValues -> k
    boolean mStartAtZero -> l
    boolean mFilterData -> m
    android.graphics.Paint mGridPaint -> n
    android.graphics.Paint mGridBackgroundPaint -> o
    android.graphics.Paint mBorderPaint -> p
    android.graphics.Paint mXLabelPaint -> q
    android.graphics.Paint mYLabelPaint -> r
    android.graphics.Paint mHighlightPaint -> s
    boolean mHighLightIndicatorEnabled -> t
    boolean mAutoFinishDrawing -> u
    boolean mDrawVerticalGrid -> v
    boolean mDrawHorizontalGrid -> w
    boolean mDrawYLabels -> x
    boolean mDrawXLabels -> y
    boolean mDrawBorder -> z
    boolean mDrawGridBackground -> A
    com.github.mikephil.charting.interfaces.OnDrawListener mDrawListener -> B
    com.github.mikephil.charting.utils.YLabels mYLabels -> C
    com.github.mikephil.charting.utils.XLabels mXLabels -> D
    com.github.mikephil.charting.data.filter.Approximator mApproximator -> aA
    java.text.DecimalFormat mFormatValue -> E
    int mYLabelFormatDigits -> F
    com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle[] mBorderStyles -> aB
    void init() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void prepare() -> g
    void notifyDataSetChanged() -> h
    void calculateOffsets() -> i
    void calcModulus() -> j
    void calcFormats() -> k
    void calcMinMax(boolean) -> a
    void prepareXLabels() -> l
    void prepareYLabels() -> b
    void drawXLabels() -> m
    void drawXLabels(float) -> e
    void drawYLabels() -> n
    void drawYLabels(float,float[]) -> a
    void drawBorder() -> o
    void drawGridBackground() -> p
    void drawHorizontalGrid() -> q
    void drawVerticalGrid() -> r
    boolean isOffContentRight(float) -> a
    boolean isOffContentLeft(float) -> b
    boolean isOffContentTop(float) -> c
    boolean isOffContentBottom(float) -> d
    void disableScroll() -> s
    void enableScroll() -> t
    void zoomIn(float,float) -> a
    void zoomOut(float,float) -> b
    android.graphics.Matrix refreshTouch(android.graphics.Matrix) -> a
    void limitTransAndScale(android.graphics.Matrix) -> b
    void setOnDrawListener(com.github.mikephil.charting.interfaces.OnDrawListener) -> setOnDrawListener
    void setDrawingEnabled(boolean) -> setDrawingEnabled
    void setAutoFinish(boolean) -> setAutoFinish
    boolean isAutoFinishEnabled() -> u
    com.github.mikephil.charting.interfaces.OnDrawListener getDrawListener() -> getDrawListener
    void setYLabelCount(int) -> setYLabelCount
    boolean hasFixedYValues() -> v
    void setGridColor(int) -> setGridColor
    void setMaxVisibleValueCount(int) -> setMaxVisibleValueCount
    void setYLabelTextSize(float) -> setYLabelTextSize
    void setXLabelTextSize(float) -> setXLabelTextSize
    void setHighlightIndicatorEnabled(boolean) -> setHighlightIndicatorEnabled
    void setStartAtZero(boolean) -> setStartAtZero
    void setUnit(java.lang.String) -> setUnit
    void setDrawUnitsInChart(boolean) -> setDrawUnitsInChart
    void setGridWidth(float) -> setGridWidth
    void setDragEnabled(boolean) -> setDragEnabled
    boolean isDragEnabled() -> w
    void setDrawVerticalGrid(boolean) -> setDrawVerticalGrid
    void setDrawHorizontalGrid(boolean) -> setDrawHorizontalGrid
    void setDrawBorder(boolean) -> setDrawBorder
    void setDrawGridBackground(boolean) -> setDrawGridBackground
    void setDrawXLabels(boolean) -> setDrawXLabels
    void setDrawYLabels(boolean) -> setDrawYLabels
    void setBorderStyles(com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle[]) -> setBorderStyles
    com.github.mikephil.charting.utils.Highlight getHighlightByTouchPoint(float,float) -> c
    int getClosestDataSetIndex(java.util.ArrayList,float) -> b
    com.github.mikephil.charting.utils.PointD getValuesByTouchPoint(float,float) -> d
    com.github.mikephil.charting.data.Entry getEntryByTouchPoint(float,float) -> e
    float getScaleX() -> getScaleX
    float getScaleY() -> getScaleY
    float getMaxScaleX() -> getMaxScaleX
    float getMaxScaleY() -> getMaxScaleY
    void setMaxScaleY(float) -> setMaxScaleY
    void setXLabelTypeface(android.graphics.Typeface) -> setXLabelTypeface
    void setYLabelTypeface(android.graphics.Typeface) -> setYLabelTypeface
    void setLabelTypeface(android.graphics.Typeface) -> setLabelTypeface
    com.github.mikephil.charting.utils.YLabels getYLabels() -> getYLabels
    com.github.mikephil.charting.utils.XLabels getXLabels() -> getXLabels
    void setPinchZoom(boolean) -> setPinchZoom
    boolean isPinchZoomEnabled() -> x
    com.github.mikephil.charting.data.ChartData getFilteredData() -> getFilteredData
com.github.mikephil.charting.charts.BarLineChartBase$2 -> com.github.mikephil.charting.charts.c:
    int[] $SwitchMap$com$github$mikephil$charting$charts$BarLineChartBase$BorderStyle -> a
com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle -> com.github.mikephil.charting.charts.d:
    com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle LEFT -> a
    com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle RIGHT -> b
    com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle TOP -> c
    com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle BOTTOM -> d
    com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle[] $VALUES -> e
    com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle[] values() -> values
    com.github.mikephil.charting.charts.BarLineChartBase$BorderStyle valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.charts.Chart -> com.github.mikephil.charting.charts.e:
    int mColorDarkBlue -> G
    int mColorDarkRed -> H
    int mBackgroundColor -> a
    int mValueDigitsToUse -> I
    int mValueFormatDigits -> J
    float mOffsetLeft -> K
    float mOffsetTop -> L
    float mOffsetRight -> M
    float mOffsetBottom -> N
    com.github.mikephil.charting.data.ChartData mCurrentData -> O
    com.github.mikephil.charting.data.ChartData mOriginalData -> P
    android.graphics.Bitmap mDrawBitmap -> Q
    android.graphics.Canvas mDrawCanvas -> R
    float mYChartMin -> S
    float mYChartMax -> T
    android.graphics.Paint mDrawPaint -> U
    android.graphics.Paint mDescPaint -> V
    android.graphics.Paint mInfoPaint -> W
    android.graphics.Paint mValuePaint -> Z
    android.graphics.Paint mRenderPaint -> aa
    android.graphics.Paint mLegendLabelPaint -> ab
    android.graphics.Paint mLegendFormPaint -> ac
    com.github.mikephil.charting.utils.ColorTemplate mCt -> ad
    java.lang.String mDescription -> ae
    boolean mDataNotSet -> af
    float mDeltaY -> ag
    float mDeltaX -> ah
    android.graphics.Matrix mMatrixValueToPx -> ai
    android.graphics.Matrix mMatrixOffset -> aj
    android.graphics.Matrix mMatrixTouch -> ak
    boolean mTouchEnabled -> al
    boolean mDrawYValues -> am
    boolean mHighlightEnabled -> an
    boolean mSeparateTousands -> ao
    boolean mDrawLegend -> ap
    android.graphics.Rect mContentRect -> aq
    com.github.mikephil.charting.utils.Legend mLegend -> ar
    com.github.mikephil.charting.interfaces.OnChartValueSelectedListener mSelectionListener -> as
    boolean mOffsetsCalculated -> at
    android.view.View$OnTouchListener mListener -> au
    com.github.mikephil.charting.utils.Highlight[] mIndicesToHightlight -> av
    boolean mDrawMarkerViews -> aw
    com.github.mikephil.charting.utils.MarkerView mMarkerView -> ax
    boolean mMatrixOnLayoutPrepared -> b
    void init() -> a
    void initWithDummyData() -> y
    void setData(com.github.mikephil.charting.data.ChartData) -> setData
    void prepare() -> g
    void calculateOffsets() -> i
    void calcMinMax(boolean) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void clearAll() -> z
    void prepareMatrix() -> A
    void prepareContentRect() -> B
    void prepareLegend() -> C
    float[] generateTransformedValues(java.util.ArrayList,float) -> a
    void transformPath(android.graphics.Path) -> a
    void transformPaths(java.util.ArrayList) -> a
    void transformPointArray(float[]) -> a
    void transformRect(android.graphics.RectF) -> a
    void drawLegend() -> D
    void drawDescription() -> E
    void drawValues() -> e
    void drawData() -> d
    void drawAdditional() -> f
    void drawHighlights() -> c
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean valuesToHighlight() -> F
    void highlightValues(com.github.mikephil.charting.utils.Highlight[]) -> a
    void drawMarkers() -> G
    void drawMarkerView(int,int) -> c
    void setOnTouchListener(android.view.View$OnTouchListener) -> setOnTouchListener
    void setOnChartValueSelectedListener(com.github.mikephil.charting.interfaces.OnChartValueSelectedListener) -> setOnChartValueSelectedListener
    void setHighlightEnabled(boolean) -> setHighlightEnabled
    float getYValueSum() -> getYValueSum
    float getYMax() -> getYMax
    float getYChartMin() -> getYChartMin
    float getYChartMax() -> getYChartMax
    float getYMin() -> getYMin
    float getDeltaX() -> getDeltaX
    float getAverage() -> getAverage
    int getValueCount() -> getValueCount
    android.graphics.PointF getCenter() -> getCenter
    android.graphics.PointF getCenterOffsets() -> getCenterOffsets
    void setDescriptionTextSize(float) -> setDescriptionTextSize
    void setDescription(java.lang.String) -> setDescription
    float getOffsetLeft() -> getOffsetLeft
    float getOffsetBottom() -> getOffsetBottom
    float getOffsetRight() -> getOffsetRight
    float getOffsetTop() -> getOffsetTop
    void setTouchEnabled(boolean) -> setTouchEnabled
    void setDrawYValues(boolean) -> setDrawYValues
    void setColorTemplate(com.github.mikephil.charting.utils.ColorTemplate) -> setColorTemplate
    com.github.mikephil.charting.utils.ColorTemplate getColorTemplate() -> getColorTemplate
    void setMarkerView(com.github.mikephil.charting.utils.MarkerView) -> setMarkerView
    com.github.mikephil.charting.utils.MarkerView getMarkerView() -> getMarkerView
    void setDrawLegend(boolean) -> setDrawLegend
    com.github.mikephil.charting.utils.Legend getLegend() -> getLegend
    void setDrawMarkerViews(boolean) -> setDrawMarkerViews
    void setValuePaintColor(int) -> setValuePaintColor
    void setSeparateThousands(boolean) -> setSeparateThousands
    float getYValueByDataSetIndex(int,int) -> a
    com.github.mikephil.charting.data.DataSet getDataSetByIndex(int) -> a
    com.github.mikephil.charting.data.Entry getEntryByDataSetIndex(int,int) -> b
    java.util.ArrayList getYValsAtIndex(int) -> b
    com.github.mikephil.charting.data.ChartData getDataCurrent() -> getDataCurrent
    com.github.mikephil.charting.data.ChartData getDataOriginal() -> getDataOriginal
    void setValueTypeface(android.graphics.Typeface) -> setValueTypeface
    void setDescriptionTypeface(android.graphics.Typeface) -> setDescriptionTypeface
    void setValueDigits(int) -> setValueDigits
    int getValueDigits() -> getValueDigits
    void setBackgroundColor(int) -> setBackgroundColor
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onAttachedToWindow() -> onAttachedToWindow
com.github.mikephil.charting.charts.Chart$1 -> com.github.mikephil.charting.charts.f:
    int[] $SwitchMap$com$github$mikephil$charting$utils$Legend$LegendPosition -> a
com.github.mikephil.charting.charts.LineChart -> com.github.mikephil.charting.charts.LineChart:
    float mCircleSize -> ay
    float mLineWidth -> az
    float mHighlightWidth -> aA
    boolean mDrawFilled -> aB
    boolean mDrawCircles -> aC
    android.graphics.Paint mFilledPaint -> aD
    android.graphics.Paint mCirclePaintInner -> aE
    boolean mDrawCubic -> aF
    void init() -> a
    void drawHighlights() -> c
    void drawData() -> d
    void drawValues() -> e
    void drawAdditional() -> f
    void setDrawCircles(boolean) -> setDrawCircles
    void setCircleSize(float) -> setCircleSize
    void setDrawFilled(boolean) -> setDrawFilled
    void setLineWidth(float) -> setLineWidth
    float getLineWidth() -> getLineWidth
    void setFillColor(int) -> setFillColor
    void setHighlightLineWidth(float) -> setHighlightLineWidth
    float getHighlightLineWidth() -> getHighlightLineWidth
com.github.mikephil.charting.charts.ScatterChart -> com.github.mikephil.charting.charts.g:
    android.graphics.Path mCustomScatterPath -> ay
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape[] mScatterShapes -> az
    float mShapeSize -> aA
    void drawData() -> d
    void drawValues() -> e
    void drawHighlights() -> c
    void drawAdditional() -> f
    void setScatterShapeSize(float) -> setScatterShapeSize
    float getScatterShapeSize() -> getScatterShapeSize
    void setScatterShapes(com.github.mikephil.charting.charts.ScatterChart$ScatterShape[]) -> setScatterShapes
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape[] getScatterShapes() -> getScatterShapes
    void setCustomScatterShape(android.graphics.Path) -> setCustomScatterShape
com.github.mikephil.charting.charts.ScatterChart$ScatterShape -> com.github.mikephil.charting.charts.h:
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape CROSS -> a
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape TRIANGLE -> b
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape CIRCLE -> c
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape SQUARE -> d
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape CUSTOM -> e
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape[] $VALUES -> f
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape[] values() -> values
    com.github.mikephil.charting.charts.ScatterChart$ScatterShape valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.data.ChartData -> com.github.mikephil.charting.a.a:
    float mYMax -> a
    float mYMin -> b
    float mYValueSum -> c
    java.util.ArrayList mXVals -> d
    java.util.ArrayList mDataSets -> e
    void init(java.util.ArrayList,java.util.ArrayList) -> a
    void calcMinMax() -> j
    void calcYValueSum() -> k
    void notifyDataForNewEntry(com.github.mikephil.charting.data.Entry) -> a
    int getDataSetCount() -> a
    float getYMin() -> b
    float getYMax() -> c
    float getYValueSum() -> d
    boolean isValid() -> e
    java.util.ArrayList getXVals() -> f
    com.github.mikephil.charting.data.Entry getEntryForHighlight(com.github.mikephil.charting.utils.Highlight) -> a
    com.github.mikephil.charting.data.DataSet getDataSetByIndex(int) -> a
    java.util.ArrayList getDataSets() -> g
    int getXValCount() -> h
    int getYValCount() -> i
com.github.mikephil.charting.data.DataSet -> com.github.mikephil.charting.a.b:
    java.util.ArrayList mYVals -> a
    float mYMax -> b
    float mYMin -> c
    float mYValueSum -> d
    java.lang.String mLabel -> e
    void notifyDataSetChanged() -> a
    void calcMinMax() -> i
    void calcYValueSum() -> j
    int getEntryCount() -> b
    float getYValForXIndex(int) -> a
    com.github.mikephil.charting.data.Entry getEntryForXIndex(int) -> b
    java.util.ArrayList getYVals() -> c
    float getYValueSum() -> d
    float getYMin() -> e
    float getYMax() -> f
    java.lang.String toString() -> toString
    java.lang.String toSimpleString() -> g
    java.lang.String getLabel() -> h
com.github.mikephil.charting.data.DrawingContext -> com.github.mikephil.charting.a.c:
    com.github.mikephil.charting.data.DataSet mCurrentDrawingDataSet -> a
    int mLastDrawnDataSetIndex -> b
    boolean mAutoFinishDrawing -> c
    java.util.ArrayList mCurrentDrawingEntries -> d
    com.github.mikephil.charting.data.Entry mMovingEntry -> e
    com.github.mikephil.charting.interfaces.OnDrawListener mListener -> f
    void createNewDrawingDataSet(com.github.mikephil.charting.data.ChartData) -> a
    boolean addNewDrawingEntry(com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.data.ChartData) -> a
    void notifyEntryMoved(com.github.mikephil.charting.data.ChartData) -> b
    void fillData(com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.data.Entry) -> a
    void finishNewDrawingEntry(com.github.mikephil.charting.data.ChartData) -> c
    void deleteLastDrawingEntry(com.github.mikephil.charting.data.ChartData) -> d
    void init(com.github.mikephil.charting.interfaces.OnDrawListener,boolean) -> a
    void setMovingEntry(com.github.mikephil.charting.data.Entry) -> a
    com.github.mikephil.charting.data.Entry getMovingEntry() -> a
com.github.mikephil.charting.data.Entry -> com.github.mikephil.charting.a.d:
    float mVal -> a
    int mXIndex -> b
    int getXIndex() -> a
    float getVal() -> b
    void setVal(float) -> a
    java.lang.String toString() -> toString
com.github.mikephil.charting.data.filter.Approximator -> com.github.mikephil.charting.a.a.a:
    com.github.mikephil.charting.data.filter.Approximator$ApproximatorType mType -> a
    double mTolerance -> b
    float mScaleRatio -> c
    float mDeltaRatio -> d
    boolean[] keep -> e
    void setRatios(float,float) -> a
    java.util.ArrayList filter(java.util.ArrayList) -> a
    java.util.ArrayList filter(java.util.ArrayList,double) -> a
    java.util.ArrayList reduceWithDouglasPeuker(java.util.ArrayList,double) -> b
    void algorithmDouglasPeucker(java.util.ArrayList,double,int,int) -> a
    double calcAngleBetweenLines(com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.data.Entry) -> a
    double calcAngleWithRatios(com.github.mikephil.charting.data.Entry,com.github.mikephil.charting.data.Entry) -> a
com.github.mikephil.charting.data.filter.Approximator$1 -> com.github.mikephil.charting.a.a.b:
    int[] $SwitchMap$com$github$mikephil$charting$data$filter$Approximator$ApproximatorType -> a
com.github.mikephil.charting.data.filter.Approximator$ApproximatorType -> com.github.mikephil.charting.a.a.c:
    com.github.mikephil.charting.data.filter.Approximator$ApproximatorType NONE -> a
    com.github.mikephil.charting.data.filter.Approximator$ApproximatorType DOUGLAS_PEUCKER -> b
    com.github.mikephil.charting.data.filter.Approximator$ApproximatorType[] $VALUES -> c
    com.github.mikephil.charting.data.filter.Approximator$ApproximatorType[] values() -> values
    com.github.mikephil.charting.data.filter.Approximator$ApproximatorType valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.exception.DrawingDataSetNotCreatedException -> com.github.mikephil.charting.b.a:
com.github.mikephil.charting.interfaces.OnChartValueSelectedListener -> com.github.mikephil.charting.c.a:
    void onValuesSelected(com.github.mikephil.charting.data.Entry[],com.github.mikephil.charting.utils.Highlight[]) -> a
    void onNothingSelected() -> a
com.github.mikephil.charting.interfaces.OnDrawListener -> com.github.mikephil.charting.c.b:
    void onEntryAdded(com.github.mikephil.charting.data.Entry) -> a
    void onEntryMoved(com.github.mikephil.charting.data.Entry) -> b
    void onDrawFinished(com.github.mikephil.charting.data.DataSet) -> a
com.github.mikephil.charting.listener.BarLineChartTouchListener -> com.github.mikephil.charting.d.a:
    android.graphics.Matrix mMatrix -> a
    android.graphics.Matrix mSavedMatrix -> b
    android.graphics.PointF mTouchStartPoint -> c
    android.graphics.PointF mTouchPointCenter -> d
    boolean mDrawingEnabled -> e
    int mTouchMode -> f
    float mSavedXDist -> g
    float mSavedYDist -> h
    float mSavedDist -> i
    long mStartTimestamp -> j
    com.github.mikephil.charting.utils.Highlight mLastHighlighted -> k
    com.github.mikephil.charting.charts.BarLineChartBase mChart -> l
    com.github.mikephil.charting.data.DrawingContext mDrawingContext -> m
    android.view.GestureDetector mGestureDetector -> n
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void setDrawingEnabled(boolean) -> a
    float distance(float,float,float,float) -> a
    void midPoint(android.graphics.PointF,android.view.MotionEvent) -> a
    float spacing(android.view.MotionEvent) -> a
    float getXDist(android.view.MotionEvent) -> b
    float getYDist(android.view.MotionEvent) -> c
    android.graphics.PointF getTrans(float,float) -> a
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
com.github.mikephil.charting.utils.ColorTemplate -> com.github.mikephil.charting.e.a:
    int[] VITAMIN_A_COLOR -> a
    int MAIN_COLOR -> b
    int[] FRESH_COLORS -> c
    int[] MONO_COLORS -> d
    int[] LIBERTY_COLORS -> e
    int[] COLORFUL_COLORS -> f
    int[] GREEN_COLORS -> g
    int[] JOYFUL_COLORS -> h
    int[] PASTEL_COLORS -> i
    int[] VORDIPLOM_COLORS -> j
    java.util.ArrayList mDataSetColors -> k
    int mColorCount -> l
    void addDataSetColors(int[],android.content.Context) -> a
    void addColorsForDataSets(int[],android.content.Context) -> b
    java.util.ArrayList getColors() -> a
    java.util.ArrayList getDataSetColors(int) -> a
    java.util.ArrayList createColors(android.content.Context,int[]) -> a
com.github.mikephil.charting.utils.Highlight -> com.github.mikephil.charting.e.b:
    int mXIndex -> a
    int mDataSetIndex -> b
    int getDataSetIndex() -> a
    int getXIndex() -> b
    boolean equalTo(com.github.mikephil.charting.utils.Highlight) -> a
com.github.mikephil.charting.utils.Legend -> com.github.mikephil.charting.e.c:
    float mLegendOffsetBottom -> a
    float mLegendOffsetRight -> b
    float mLegendOffsetLeft -> c
    float mLegendOffsetTop -> d
    int[] mColors -> e
    java.lang.String[] mLegendLabels -> f
    com.github.mikephil.charting.utils.Legend$LegendPosition mPosition -> g
    com.github.mikephil.charting.utils.Legend$LegendForm mShape -> h
    android.graphics.Typeface mTypeface -> i
    float mFormSize -> j
    float mEntrySpace -> k
    float mFormToTextSpace -> l
    int getMaximumEntryLength(android.graphics.Paint) -> a
    java.lang.String[] getLegendLabels() -> a
    com.github.mikephil.charting.utils.Legend$LegendPosition getPosition() -> b
    com.github.mikephil.charting.utils.Legend$LegendForm getForm() -> c
    android.graphics.Typeface getTypeface() -> d
    float getFormSize() -> e
    float getEntrySpace() -> f
    float getFormToTextSpace() -> g
    void drawForm(android.graphics.Canvas,float,float,android.graphics.Paint,int) -> a
    void drawLabel(android.graphics.Canvas,float,float,android.graphics.Paint,int) -> b
    void apply(com.github.mikephil.charting.utils.Legend) -> a
    float getOffsetBottom() -> h
    float getOffsetRight() -> i
    void setOffsetBottom(float) -> a
    void setOffsetRight(float) -> b
    float getOffsetTop() -> j
    float getOffsetLeft() -> k
    void setOffsetTop(float) -> c
    void setOffsetLeft(float) -> d
com.github.mikephil.charting.utils.Legend$1 -> com.github.mikephil.charting.e.d:
    int[] $SwitchMap$com$github$mikephil$charting$utils$Legend$LegendForm -> a
com.github.mikephil.charting.utils.Legend$LegendForm -> com.github.mikephil.charting.e.e:
    com.github.mikephil.charting.utils.Legend$LegendForm SQUARE -> a
    com.github.mikephil.charting.utils.Legend$LegendForm CIRCLE -> b
    com.github.mikephil.charting.utils.Legend$LegendForm LINE -> c
    com.github.mikephil.charting.utils.Legend$LegendForm[] $VALUES -> d
    com.github.mikephil.charting.utils.Legend$LegendForm[] values() -> values
    com.github.mikephil.charting.utils.Legend$LegendForm valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.utils.Legend$LegendPosition -> com.github.mikephil.charting.e.f:
    com.github.mikephil.charting.utils.Legend$LegendPosition RIGHT_OF_CHART -> a
    com.github.mikephil.charting.utils.Legend$LegendPosition BELOW_CHART_LEFT -> b
    com.github.mikephil.charting.utils.Legend$LegendPosition BELOW_CHART_RIGHT -> c
    com.github.mikephil.charting.utils.Legend$LegendPosition[] $VALUES -> d
    com.github.mikephil.charting.utils.Legend$LegendPosition[] values() -> values
    com.github.mikephil.charting.utils.Legend$LegendPosition valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.utils.MarkerView -> com.github.mikephil.charting.e.g:
    float mXOffset -> a
    float mYOffset -> b
    void setupLayoutResource(int) -> setupLayoutResource
    void draw(android.graphics.Canvas,float,float) -> a
    void refreshContent(int,float,int) -> a
    float getXOffset() -> getXOffset
    float getYOffset() -> getYOffset
com.github.mikephil.charting.utils.PointD -> com.github.mikephil.charting.e.h:
    double x -> a
    double y -> b
    java.lang.String toString() -> toString
com.github.mikephil.charting.utils.SelInfo -> com.github.mikephil.charting.e.i:
    float val -> a
    int dataSetIndex -> b
com.github.mikephil.charting.utils.Utils -> com.github.mikephil.charting.e.j:
    android.content.res.Resources mRes -> a
    int[] POW_10 -> b
    void init(android.content.res.Resources) -> a
    float convertDpToPixel(float) -> a
    int calcTextWidth(android.graphics.Paint,java.lang.String) -> a
    int calcTextHeight(android.graphics.Paint,java.lang.String) -> b
    int getFormatDigits(float) -> b
    java.lang.String formatNumber(float,int,boolean) -> a
    float roundToNextSignificant(double) -> a
    int[] convertIntegers(java.util.ArrayList) -> a
    java.lang.String[] convertStrings(java.util.ArrayList) -> b
com.github.mikephil.charting.utils.XLabels -> com.github.mikephil.charting.e.k:
    int mXLabelWidth -> a
    int mXLabelHeight -> b
    int mXAxisLabelModulus -> c
    boolean mCenterXAxisLabels -> e
    boolean mAdjustXAxisLabels -> d
    com.github.mikephil.charting.utils.XLabels$XLabelPosition mPosition -> f
    boolean isCenterXLabelsEnabled() -> a
    boolean isAdjustXLabelsEnabled() -> b
    com.github.mikephil.charting.utils.XLabels$XLabelPosition getPosition() -> c
com.github.mikephil.charting.utils.XLabels$XLabelPosition -> com.github.mikephil.charting.e.l:
    com.github.mikephil.charting.utils.XLabels$XLabelPosition TOP -> a
    com.github.mikephil.charting.utils.XLabels$XLabelPosition BOTTOM -> b
    com.github.mikephil.charting.utils.XLabels$XLabelPosition BOTH_SIDED -> c
    com.github.mikephil.charting.utils.XLabels$XLabelPosition[] $VALUES -> d
    com.github.mikephil.charting.utils.XLabels$XLabelPosition[] values() -> values
    com.github.mikephil.charting.utils.XLabels$XLabelPosition valueOf(java.lang.String) -> valueOf
com.github.mikephil.charting.utils.YLabels -> com.github.mikephil.charting.e.m:
    float[] mEntries -> a
    int mEntryCount -> b
    int mDecimals -> c
    boolean mDrawUnitsInLabels -> d
    boolean mDrawTopYLabelEntry -> e
    com.github.mikephil.charting.utils.YLabels$YLabelPosition mPosition -> f
    com.github.mikephil.charting.utils.YLabels$YLabelPosition getPosition() -> a
    boolean isDrawUnitsInYLabelEnabled() -> b
    boolean isDrawTopYLabelEntryEnabled() -> c
com.github.mikephil.charting.utils.YLabels$YLabelPosition -> com.github.mikephil.charting.e.n:
    com.github.mikephil.charting.utils.YLabels$YLabelPosition LEFT -> a
    com.github.mikephil.charting.utils.YLabels$YLabelPosition RIGHT -> b
    com.github.mikephil.charting.utils.YLabels$YLabelPosition BOTH_SIDED -> c
    com.github.mikephil.charting.utils.YLabels$YLabelPosition[] $VALUES -> d
    com.github.mikephil.charting.utils.YLabels$YLabelPosition[] values() -> values
    com.github.mikephil.charting.utils.YLabels$YLabelPosition valueOf(java.lang.String) -> valueOf
healthVT.vitamine.DailyActivity -> healthVT.vitamine.DailyActivity:
    int vitaminRowCount -> a
    android.widget.LinearLayout tempDataLayout -> h
    android.widget.LinearLayout calculateLayout -> i
    android.graphics.Typeface demiFont -> j
    java.lang.String[] tempFoodArray -> k
    int paddingTop -> b
    int paddingLeft -> c
    int paddingRight -> d
    int paddingBottom -> e
    sqlite.Database db -> l
    android.widget.AutoCompleteTextView foodInput -> m
    android.widget.TextView vitaminEditButton -> n
    android.widget.TextView calculateButton -> o
    boolean tempListOn -> f
    boolean editOn -> g
    void onCreate(android.os.Bundle) -> onCreate
    void attachEvent() -> c
    void calculateButtonClicked() -> a
    void getFoodVitamin(java.lang.String) -> a
    void createVitaminRow(org.json.JSONObject) -> a
    void createVitaminRow(beans.VitaminBean) -> a
    void addTempFood() -> d
    void turnOnEdit() -> b
    android.widget.TextView getDividedLine() -> e
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void access$000(healthVT.vitamine.DailyActivity,java.lang.String) -> a
    android.widget.AutoCompleteTextView access$100(healthVT.vitamine.DailyActivity) -> a
    void access$200(healthVT.vitamine.DailyActivity,org.json.JSONObject) -> a
healthVT.vitamine.DailyActivity$1 -> healthVT.vitamine.a:
    healthVT.vitamine.DailyActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.DailyActivity$2 -> healthVT.vitamine.b:
    healthVT.vitamine.DailyActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
healthVT.vitamine.DailyActivity$3 -> healthVT.vitamine.c:
    healthVT.vitamine.DailyActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.DailyActivity$4 -> healthVT.vitamine.d:
    healthVT.vitamine.DailyActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.DailyActivity$5 -> healthVT.vitamine.e:
    healthVT.vitamine.DailyActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.DailyActivity$6 -> healthVT.vitamine.f:
    java.lang.String val$foodName -> a
    healthVT.vitamine.DailyActivity this$0 -> b
    void run() -> run
healthVT.vitamine.MyActivity -> healthVT.vitamine.MyActivity:
    android.widget.TextView loginAsGoogle -> a
    void onCreate(android.os.Bundle) -> onCreate
healthVT.vitamine.SelfInfoActivity -> healthVT.vitamine.SelfInfoActivity:
    android.widget.EditText emailEdit -> a
    android.widget.EditText nameEdit -> b
    android.widget.EditText ageEdit -> c
    android.widget.EditText heightEdit -> d
    android.widget.EditText weightEdit -> e
    android.widget.EditText ethnicityEdit -> f
    android.widget.RadioButton maleRadioButton -> g
    android.widget.RadioButton femaleRadioButton -> h
    android.widget.TextView saveButton -> i
    android.widget.TextView logoutButton -> j
    util.User user -> k
    void onCreate(android.os.Bundle) -> onCreate
    void attachEvent() -> a
    void blink(android.view.View) -> a
    void saveInfo() -> b
    void processStatusChangeAnimation(java.lang.String) -> a
    android.view.animation.Animation getBlinkAnim(long,int,int) -> a
    void access$000(healthVT.vitamine.SelfInfoActivity,android.view.View) -> a
    void access$100(healthVT.vitamine.SelfInfoActivity) -> a
healthVT.vitamine.SelfInfoActivity$1 -> healthVT.vitamine.g:
    healthVT.vitamine.SelfInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.SelfInfoActivity$2 -> healthVT.vitamine.h:
    healthVT.vitamine.SelfInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.SelfInfoActivity$3 -> healthVT.vitamine.i:
    healthVT.vitamine.SelfInfoActivity this$0 -> a
    void run() -> run
healthVT.vitamine.SelfInfoActivity$3$1 -> healthVT.vitamine.j:
    healthVT.vitamine.SelfInfoActivity$3 this$1 -> a
    void run() -> run
healthVT.vitamine.SelfInfoActivity$3$1$1 -> healthVT.vitamine.k:
    healthVT.vitamine.SelfInfoActivity$3$1 this$2 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
healthVT.vitamine.SelfInfoActivity$3$2 -> healthVT.vitamine.l:
    healthVT.vitamine.SelfInfoActivity$3 this$1 -> a
    void run() -> run
healthVT.vitamine.SelfInfoActivity$4 -> healthVT.vitamine.m:
    java.lang.String val$textChangeTo -> a
    healthVT.vitamine.SelfInfoActivity this$0 -> b
    void run() -> run
healthVT.vitamine.SelfInfoActivity$4$1 -> healthVT.vitamine.n:
    healthVT.vitamine.SelfInfoActivity$4 this$1 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
healthVT.vitamine.SummaryActivity -> healthVT.vitamine.SummaryActivity:
    util.circleAnim.CircleSurface surfaceView -> a
    android.widget.LinearLayout trackLayout -> b
    android.widget.TextView trackButton -> c
    void onCreate(android.os.Bundle) -> onCreate
    void attachEvent() -> a
    void clickOnTrackButton() -> b
healthVT.vitamine.SummaryActivity$1 -> healthVT.vitamine.o:
    healthVT.vitamine.SummaryActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.SummaryActivity$2 -> healthVT.vitamine.p:
    healthVT.vitamine.SummaryActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.TitleBarActivity -> healthVT.vitamine.q:
    void onCreate(android.os.Bundle) -> onCreate
healthVT.vitamine.TitleBarActivity$1 -> healthVT.vitamine.r:
    healthVT.vitamine.TitleBarActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.VitaminChartActivity -> healthVT.vitamine.VitaminChartActivity:
    com.github.mikephil.charting.charts.LineChart vitaminChart -> a
    android.widget.TextView periodText -> b
    android.widget.Spinner periodSpinner -> c
    util.vitaminOptionCircleLayout vitaminOptionRow -> d
    org.json.JSONArray historyArray -> e
    void onCreate(android.os.Bundle) -> onCreate
    org.json.JSONArray getVitaminChartFromServer(java.lang.String) -> c
    void attachEvent() -> a
    void onClickVitaminOptionEvent(util.vitaminOptionCircle) -> a
    void updatePeriod(java.lang.String) -> a
    void updateVitaminOptionColor(java.lang.String) -> b
    void setData(org.json.JSONArray,java.lang.String) -> a
    android.widget.Spinner access$000(healthVT.vitamine.VitaminChartActivity) -> a
healthVT.vitamine.VitaminChartActivity$1 -> healthVT.vitamine.s:
    util.vitaminOptionCircle val$vitaminCircle -> a
    healthVT.vitamine.VitaminChartActivity this$0 -> b
    void onClick(android.view.View) -> onClick
healthVT.vitamine.VitaminChartActivity$2 -> healthVT.vitamine.t:
    healthVT.vitamine.VitaminChartActivity this$0 -> a
    void onClick(android.view.View) -> onClick
healthVT.vitamine.VitaminChartActivity$3 -> healthVT.vitamine.u:
    healthVT.vitamine.VitaminChartActivity this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
sqlite.Database -> b.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    boolean updateVitaminData(beans.VitaminBean,java.lang.String) -> a
    void updateAmount(java.lang.String,int) -> a
    java.util.List getVitaminData() -> a
    java.lang.String getAllFoodName() -> b
    void deleteByFoodName(java.lang.String) -> a
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    java.lang.String getToday() -> c
util.NavigationActivityListener -> util.a:
    android.app.Activity thisActivity -> a
    android.widget.LinearLayout bottomItemLayout -> b
    void listener(android.app.Activity,java.lang.String) -> a
    void attachNavigatorListener(java.lang.Class) -> a
    void updateAllIcon(java.lang.String) -> a
util.NavigationActivityListener$1 -> util.b:
    util.NavigationActivityListener this$0 -> a
    void onClick(android.view.View) -> onClick
util.NavigationActivityListener$2 -> util.c:
    util.NavigationActivityListener this$0 -> a
    void onClick(android.view.View) -> onClick
util.NavigationActivityListener$3 -> util.d:
    util.NavigationActivityListener this$0 -> a
    void onClick(android.view.View) -> onClick
util.NumberView -> util.e:
    int height -> a
    int width -> b
    int stroke -> c
    int color -> d
    int resource -> e
    int radius -> f
    android.graphics.Paint paint -> g
    void onMeasure(int,int) -> onMeasure
    void updateColor(int,int) -> a
util.RemoveIcon -> util.f:
    android.graphics.Paint paint -> a
    int stroke -> b
    int color -> c
    int height -> d
    int width -> e
    int radius -> f
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    void updateColor(int) -> a
util.User -> util.g:
    java.lang.String email -> a
    java.lang.String password -> b
    java.lang.String token -> c
    android.content.SharedPreferences sharedData -> d
    boolean returnUser -> e
    android.content.Context context -> f
    boolean logout() -> a
    boolean updateUserInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    org.json.JSONObject getUserInfo() -> b
util.VitaminRow -> util.h:
    android.content.Context context -> a
    int paddingTop -> b
    int paddingLeft -> c
    int paddingRight -> d
    int paddingBottom -> e
    beans.VitaminBean vitaminBean -> o
    sqlite.Database db -> p
    util.NumberView numberView -> f
    android.widget.Spinner numberSpinner -> g
    int vitaminCircleWidth -> h
    int vitaminCircleHeight -> i
    int vitaminCircleRadius -> j
    android.widget.LinearLayout vitaminCircleLayout -> q
    boolean initialized -> k
    android.widget.LinearLayout foodLayout -> l
    android.view.ViewGroup root -> m
    android.widget.FrameLayout dailyFrameLayout -> n
    void createView(beans.VitaminBean,int) -> a
    void vitaminSection() -> a
    void popupWindow(java.lang.String) -> a
    void updateVitaminAmount(int) -> a
    void removeView() -> b
    void redrawBackground() -> c
    void access$000(util.VitaminRow,java.lang.String) -> a
util.VitaminRow$1 -> util.i:
    util.VitaminRow this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
util.VitaminRow$2 -> util.j:
    util.VitaminRow this$0 -> a
    void onClick(android.view.View) -> onClick
util.VitaminRow$3 -> util.k:
    util.VitaminRow this$0 -> a
    void onClick(android.view.View) -> onClick
util.VitaminRow$4 -> util.l:
    util.VitaminRow this$0 -> a
    void onClick(android.view.View) -> onClick
util.circleAnim.CircleAnimThread -> util.circleAnim.a:
    int circleHeight -> h
    int circleWidth -> i
    int circleRadius -> j
    int textSize -> k
    android.view.SurfaceHolder holder -> l
    android.graphics.Paint paint -> m
    int refreshRate -> n
    int rate -> o
    boolean allFinished -> p
    int x -> a
    int stroke1 -> b
    int stroke2 -> c
    int stroke3 -> d
    int stroke4 -> e
    int screenWidth -> f
    int screenHeight -> g
    int canvasWidth -> q
    java.util.List circleArray -> r
    void run() -> run
    void draw(android.graphics.Canvas) -> a
    boolean isFinished() -> a
    int getWidth() -> b
util.circleAnim.CircleAnimThread$Circle -> util.circleAnim.b:
    int x -> b
    int y -> c
    int radius -> d
    int color -> e
    int angle -> f
    int tempY -> g
    int percentage -> h
    boolean finished -> i
    boolean reverse -> j
    java.lang.String vitaminName -> k
    util.circleAnim.CircleAnimThread this$0 -> a
    java.lang.String getText() -> a
    int getColor() -> b
    int access$000(util.circleAnim.CircleAnimThread$Circle) -> a
    int access$100(util.circleAnim.CircleAnimThread$Circle) -> b
    int access$200(util.circleAnim.CircleAnimThread$Circle) -> c
    int access$300(util.circleAnim.CircleAnimThread$Circle) -> d
    int access$400(util.circleAnim.CircleAnimThread$Circle) -> e
    boolean access$500(util.circleAnim.CircleAnimThread$Circle) -> f
    int access$412(util.circleAnim.CircleAnimThread$Circle,int) -> a
    boolean access$502(util.circleAnim.CircleAnimThread$Circle,boolean) -> a
util.circleAnim.CircleSurface -> util.circleAnim.CircleSurface:
    android.view.SurfaceHolder holder -> a
    util.circleAnim.CircleAnimThread circleThread -> b
    beans.VitaminBean vitamin -> c
    void start(beans.VitaminBean) -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
util.popupWindow -> util.m:
    android.content.Context context -> a
    android.widget.FrameLayout frameLayout -> b
    void fadeIn() -> a
    void close() -> b
util.popupWindow$1 -> util.n:
    util.popupWindow this$0 -> a
    void onClick(android.view.View) -> onClick
util.tools -> util.o:
    android.content.res.Resources mRes -> a
    void init(android.content.res.Resources) -> a
    float convertDpToPixel(float) -> a
    int getVitaminColor(java.lang.String) -> a
util.vitaminCircle -> util.p:
    int width -> a
    int height -> b
    int radius -> c
    int color -> d
    int marginLeft -> e
    java.lang.String vitamin -> f
    java.lang.String number -> g
    android.graphics.Paint paint -> h
    int textSize -> i
    int stroke1 -> j
    int stroke2 -> k
    int stroke3 -> l
    int stroke4 -> m
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    java.lang.String getVitamin() -> getVitamin
util.vitaminOptionCircle -> util.q:
    java.lang.String vitaminString -> a
    android.graphics.Paint paint -> b
    int textSize -> c
    int marginLeft -> d
    int stroke1 -> e
    int stroke2 -> f
    int stroke3 -> g
    int stroke4 -> h
    int width -> i
    int height -> j
    int radius -> k
    int vitaminTextSize -> l
    int stroke6 -> m
    boolean selected -> n
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    void selected(boolean) -> a
    java.lang.String getVitaminName() -> getVitaminName
util.vitaminOptionCircleLayout -> util.r:
    util.vitaminOptionCircle[] vitaminCircle -> a
    java.lang.String selectedVitamin -> b
    java.lang.String[] vitaminList -> c
util.vitamineServer -> util.s:
    android.content.SharedPreferences sharedData -> b
    android.content.Context context -> c
    java.lang.String host -> a
    org.json.JSONObject doInBackground(java.lang.String[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
